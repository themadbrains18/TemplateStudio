import Footer from '@/components/header-footer/footer'
import Header from '@/components/header-footer/header'
import '@/styles/globals.css'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { useEffect, useState } from 'react'
import { SessionProvider } from "next-auth/react"
import { data } from 'autoprefixer'

function App({ Component, pageProps: { session, ...pageProps } }) {

  const router = useRouter();

  const [categoryList, setCategoryList] = useState([]);
  const [productList, setproductList] = useState([]);
  const [softwareList, setSoftwareList] = useState([]);
  const [allProductList, setAllProductList] = useState([]);



  useEffect(() => {
    if (window.location.pathname != '/') {
      let container = document.querySelector("header .container");
      let footerContainer = document.querySelector("footer .container");
      [container, footerContainer].forEach((elem) => {
        elem?.classList.replace("container", "big_container");
      })
    }

    getInitialData();

  }, [])

  const getInitialData = async () => {

    let categoryList = await fetch(`${process.env.NEXT_PUBLIC_BASEURL}/category`, {
      method: "GET"
    }).then(response => response.json());

    // get product list
    let productList = await fetch(`${process.env.NEXT_PUBLIC_BASEURL}/product`, {
      method: "GET"
    }).then(response => response.json());

    // get product list
    let softwareTypeList = await fetch(`${process.env.NEXT_PUBLIC_BASEURL}/softwaretype`, {
      method: "GET"
    }).then(response => response.json());
   
    let softwareTypeItem = softwareTypeList?.data?.data?.filter((data)=>{
    return data.categoryId == 1
    })

    let AllProductList = await fetch(`${process.env.NEXT_PUBLIC_BASEURL}/product`, {
      method: "GET"
    }).then(response => response.json());

    setSoftwareList(softwareTypeItem);
    setCategoryList(categoryList?.data?.data);
    setproductList(productList?.data?.data?.slice(0, 4));
    setAllProductList(productList?.data?.data);
  }



return (
  <>
    <SessionProvider
      session={session}
      //  basePath='http://localhost:3001'
      // //  Re-fetch session every 1 minutes
      refetchInterval={1 * 60}
      // //  Re-fetches session when window is focused
      refetchOnWindowFocus={false}
    >
      <Head>
        <title>Template Studio</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      {
        router.pathname == '/register' || router.pathname == '/login' || router.pathname == '/enterOtp' || router.pathname == '/resetPassword' || router.pathname == '/forgotPassword' ?
          <>
          </>
          :

          <Header categoryList={categoryList} productList={productList} allProductList={allProductList} />
      }
      <Component {...pageProps} />
      {router.pathname == '/register' || router.pathname == '/login' || router.pathname == '/enterOtp' || router.pathname == '/resetPassword' || router.pathname == '/forgotPassword' ?
        <> </>
        :
        <Footer categoryList={categoryList} productList={productList} softwareList={softwareList}/>
      }
    </SessionProvider>

  </>
)

}

export default App;